package Persistence;
// Generated 27.10.2012 15:46:24 by Hibernate Tools 3.2.1.GA

import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Team generated by hbm2java
 */
@Entity
@Table(name = "Team", catalog = "c1teamf", uniqueConstraints =
@UniqueConstraint(columnNames = "name"))
public class Team implements java.io.Serializable {

    private Integer id;
    private Member member;
    private Department department;
    private League league;
    private Sport sport;
    private String name;
    private Set<Member> members = new HashSet(0);
    private Set<Match> matchsForTeama = new HashSet(0);
    private Set<CompetitionTeam> competitionTeams = new HashSet(0);
    private Set<Match> matchsForTeamb = new HashSet(0);
    private Set<League> leagues = new HashSet(0);

    public Team() {
    }

    public Team(Member member, Department department, Sport sport, String name) {
        this.member = member;
        this.department = department;
        this.sport = sport;
        this.name = name;
    }

    public Team(Member member, Department department, League league, Sport sport, String name, Set members, Set matchsForTeama, Set competitionTeams, Set matchsForTeamb, Set leagues) {
        this.member = member;
        this.department = department;
        this.league = league;
        this.sport = sport;
        this.name = name;
        this.members = members;
        this.matchsForTeama = matchsForTeama;
        this.competitionTeams = competitionTeams;
        this.matchsForTeamb = matchsForTeamb;
        this.leagues = leagues;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "trainer", nullable = false)
    public Member getMember() {
        return this.member;
    }

    public void setMember(Member member) {
        this.member = member;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "Department_id", nullable = false)
    public Department getDepartment() {
        return this.department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "league")
    public League getLeague() {
        return this.league;
    }

    public void setLeague(League league) {
        this.league = league;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "sport", nullable = false)
    public Sport getSport() {
        return this.sport;
    }

    public void setSport(Sport sport) {
        this.sport = sport;
    }

    @Column(name = "name", unique = true, nullable = false, length = 45)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "MemberTeam", catalog = "c1teamf", joinColumns = {
        @JoinColumn(name = "Team_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "Member_id", nullable = false, updatable = false)})
    public Set<Member> getMembers() {
        return this.members;
    }

    public void setMembers(Set members) {
        this.members = members;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "teamByTeama")
    public Set<Match> getMatchsForTeama() {
        return this.matchsForTeama;
    }

    public void setMatchsForTeama(Set matchsForTeama) {
        this.matchsForTeama = matchsForTeama;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "team")
    public Set<CompetitionTeam> getCompetitionTeams() {
        return this.competitionTeams;
    }

    public void setCompetitionTeams(Set competitionTeams) {
        this.competitionTeams = competitionTeams;
    }

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "teamByTeamb")
    public Set<Match> getMatchsForTeamb() {
        return this.matchsForTeamb;
    }

    public void setMatchsForTeamb(Set matchsForTeamb) {
        this.matchsForTeamb = matchsForTeamb;
    }

    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinTable(name = "TeamLeague", catalog = "c1teamf", joinColumns = {
        @JoinColumn(name = "Team_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "League_id", nullable = false, updatable = false)})
    public Set<League> getLeagues() {
        return this.leagues;
    }

    public void setLeagues(Set leagues) {
        this.leagues = leagues;
    }
}
