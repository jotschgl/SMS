/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CommunicationInterfaces.ClubMemberDTO;
import CommunicationInterfaces.TeamDTO;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Johannes
 */
public class MitgliederZuTeamFrame extends javax.swing.JFrame {

    private TeamDTO selectedTeam;
    private static Collection<TeamDTO> allTeamsOfDepartment;

    static {
        try {
            allTeamsOfDepartment = GUIController.getDepartmentController().getAllTeamsOfDepartment(GUIController.getLoggedInMember().getDepartment().getId());
        } catch (RemoteException ex) {
            Logger.getLogger(MitgliederZuTeamFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Creates new form MitgliederZuTeamFrame
     */
    public MitgliederZuTeamFrame() {
        initComponents();
        comboTeam.removeAllItems();
        for (TeamDTO teamDTO : allTeamsOfDepartment) {
            comboTeam.addItem(teamDTO);
        }
        tableCompTeam.setEnabled(false);
        tableTeam.setEnabled(false);
        buttonAdd.setEnabled(false);
        buttonRemove.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTeam = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompTeam = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboTeam = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonRemove.setText("<<");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        tableTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vorname", "Nachname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableTeam);

        tableCompTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vorname", "Nachname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableCompTeam);

        buttonAdd.setText(">>");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        jLabel1.setText("Team:");

        comboTeam.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTeamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(buttonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        removeRight();
    }//GEN-LAST:event_buttonRemoveActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        removeLeft();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void comboTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTeamActionPerformed
        try {
            if (selectedTeam != null) {
                speichern();
            } else {
                tableCompTeam.setEnabled(true);
                tableTeam.setEnabled(true);
                buttonAdd.setEnabled(true);
                buttonRemove.setEnabled(true);
            }
            selectedTeam = (TeamDTO) comboTeam.getSelectedItem();
            fillTables();
        } catch (RemoteException ex) {
            Logger.getLogger(MitgliederZuTeamFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comboTeamActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JComboBox comboTeam;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableCompTeam;
    private javax.swing.JTable tableTeam;
    // End of variables declaration//GEN-END:variables

    private void removeRight() {
        if (tableCompTeam.getSelectedRowCount() != 0) {
            MemberTableModel modelLeft = (MemberTableModel) tableTeam.getModel();
            MemberTableModel modelRight = (MemberTableModel) tableCompTeam.getModel();
            modelLeft.addMember(modelRight.removeMember(tableCompTeam.convertRowIndexToModel(tableCompTeam.getSelectedRow())));
            modelLeft.fireTableDataChanged();
            modelRight.fireTableDataChanged();
        }
    }

    private void removeLeft() {
        int i = tableTeam.getSelectedRow();
        if (tableTeam.getSelectedRowCount() != 0) {
            MemberTableModel modelLeft = (MemberTableModel) tableTeam.getModel();
            MemberTableModel modelRight = (MemberTableModel) tableCompTeam.getModel();
            System.out.println(i);
            int rowindex = tableTeam.convertRowIndexToModel(i);
            System.out.println(rowindex);
            modelRight.addMember(modelLeft.removeMember(rowindex));
            modelLeft.fireTableDataChanged();
            modelRight.fireTableDataChanged();
        }
    }

    private void speichern() {
        selectedTeam.getAllClubMembers().clear();
        for (ClubMemberDTO member : ((MemberTableModel) tableCompTeam.getModel()).members) {
            selectedTeam.addClubMemberToTeam(member);
        }
    }

    private void fillTables() throws RemoteException {
        Collection<ClubMemberDTO> teamMember = selectedTeam.getAllClubMembers();
        tableTeam.setModel(new MemberTableModel(teamMember));
        Collection<ClubMemberDTO> allMembers = GUIController.getClubMemberController().getAllClubMembers();
        for (ClubMemberDTO dto : allMembers) {
            if (teamMember.contains(dto)) {
                allMembers.remove(dto);
            }
        }
        tableCompTeam.setModel(new MemberTableModel(allMembers));
    }

    private class MemberTableModel extends AbstractTableModel {

        private Collection<ClubMemberDTO> members;

        public MemberTableModel(Collection<ClubMemberDTO> members) {
            this.members = members;
        }

        @Override
        public String getColumnName(int col) {
            switch (col) {
                case 0:
                    return "Vorname";
                case 1:
                    return "Nachname";
                default:
                    return "";
            }
        }

        @Override
        public int getRowCount() {
            return members.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            ClubMemberDTO m = (ClubMemberDTO) members.toArray()[rowIndex];
            if (m != null) {
                switch (columnIndex) {
                    case 0:
                        return m.getFirstname();
                    case 1:
                        return m.getLastname();
                    default:
                        return "";
                }
            }
            return "";
        }

        public ClubMemberDTO removeMember(int row) {
            ClubMemberDTO member = (ClubMemberDTO) members.toArray()[row];
            members.remove(member);
            return member;
        }

        public void addMember(ClubMemberDTO member) {
            members.add(member);
        }
    }
}
