/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CommunicationInterfaces.ClubMemberDTO;
import CommunicationInterfaces.CompetitionTeamDTO;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Johannes
 */
public class CreateCompetitionTeam extends javax.swing.JFrame {

    private boolean changed = false;
    private CompetitionTeamDTO compTeam;
    Collection<ClubMemberDTO> members;
    private HashMap<Integer, ClubMemberDTO> left = new HashMap<Integer, ClubMemberDTO>();
    private HashMap<Integer, ClubMemberDTO> right = new HashMap<Integer, ClubMemberDTO>();
    private HashMap<Integer, Integer> idsLeft = new HashMap<Integer, Integer>();
    private HashMap<Integer, Integer> idsRight = new HashMap<Integer, Integer>();

    /**
     * Creates new form CreateCompetitionTeam
     */
    public CreateCompetitionTeam(CompetitionTeamDTO compTeam) throws RemoteException {
        initComponents();
        // tableCompTeam.setModel(new MemberTableModel(compTeam.getAllClubMembersOfCompetitionTeam()));
        this.compTeam = compTeam;
        this.members = GUIController.getClubMemberController().getAllTeamMembers(compTeam.getTeam());
        tableTeam.setModel(new MemberTableModel(members));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCompTeam = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTeam = new javax.swing.JTable();
        buttonAdd = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        buttonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tableCompTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vorname", "Nachname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableCompTeam);

        tableTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vorname", "Nachname"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableTeam);

        buttonAdd.setText(">>");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonRemove.setText("<<");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        buttonSave.setText("Speichern");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(buttonRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(buttonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (changed) {
            JOptionPane.showConfirmDialog(this, "Daten wurden ge√§ndert, speichern?", "Speichern?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        changed = true;
        removeLeft();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        changed = true;
        removeRight();
    }//GEN-LAST:event_buttonRemoveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableCompTeam;
    private javax.swing.JTable tableTeam;
    // End of variables declaration//GEN-END:variables

    private void removeRight() {
        if (tableCompTeam.getSelectedRowCount() != 0) {
            MemberTableModel modelLeft = (MemberTableModel) tableTeam.getModel();
            MemberTableModel modelRight = (MemberTableModel) tableCompTeam.getModel();
            modelLeft.addMember(modelRight.removeMember(tableCompTeam.convertRowIndexToModel(tableCompTeam.getSelectedRow())));
            modelLeft.fireTableDataChanged();
            modelRight.fireTableDataChanged();
        }
    }

    private void removeLeft() {
        int i = tableTeam.getSelectedRow();
        if (tableTeam.getSelectedRowCount() != 0) {
            MemberTableModel modelLeft = (MemberTableModel) tableTeam.getModel();
            MemberTableModel modelRight = (MemberTableModel) tableCompTeam.getModel();
            i = tableTeam.getSelectedRow();
            System.out.println(i);
            int rowindex = tableTeam.convertRowIndexToModel(i);
            System.out.println(rowindex);
            modelRight.addMember(modelLeft.removeMember(rowindex));
            modelLeft.fireTableDataChanged();
            modelRight.fireTableDataChanged();
        }
    }

    private class MemberTableModel extends AbstractTableModel {

        private Collection<ClubMemberDTO> members;

        public MemberTableModel(Collection<ClubMemberDTO> members) {
            this.members = members;
        }

        @Override
        public int getRowCount() {
            return members.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            ClubMemberDTO m = (ClubMemberDTO) members.toArray()[rowIndex];
            if (columnIndex == 1) {
                return m.getFirstname();
            } else {
                return m.getLastname();
            }
        }

        public ClubMemberDTO removeMember(int row) {
            ClubMemberDTO member = (ClubMemberDTO) members.toArray()[row];
            members.remove(member);
            return member;
        }

        public void addMember(ClubMemberDTO member) {
            members.add(member);
        }
    }
}
