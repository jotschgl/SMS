/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CommunicationInterfaces.ClubMemberDTO;
import CommunicationInterfaces.IClubMemberDTOControllerFactory;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Raphaela
 */
public class MitgliedverwaltungFrame extends javax.swing.JFrame {

    /**
     * Creates new form MitgliedverwaltungFrame
     */
    private int lastSelectedRow;
    private HashMap<Integer, ClubMemberDTO> members = new HashMap<Integer, ClubMemberDTO>();

    public MitgliedverwaltungFrame() {
        initComponents();
        fillTable();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        tableMitglied.setAutoCreateRowSorter(true);
        this.setRowSorter();

        ListSelectionModel cellSelectionmodel = tableMitglied.getSelectionModel();
        cellSelectionmodel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        cellSelectionmodel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                lastSelectedRow = tableMitglied.getSelectedRow();
                if (lastSelectedRow >= 0) {
                    System.out.println(lastSelectedRow);
                    System.out.println(tableMitglied.convertRowIndexToModel(lastSelectedRow));
                    System.out.println(members.get(tableMitglied.convertRowIndexToModel(lastSelectedRow)).getFirstname());
                    System.out.println(members.get(tableMitglied.convertRowIndexToModel(lastSelectedRow)).getMail());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        memberSearch = new javax.swing.JTextField();
        NeuesMitgliedButton = new javax.swing.JButton();
        AenderungenSpeichernButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMitglied = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Support My Sports - MitgliederVerwaltung");
        setPreferredSize(new java.awt.Dimension(520, 380));
        setResizable(false);

        memberSearch.setMinimumSize(new java.awt.Dimension(6, 25));
        memberSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberSearchActionPerformed(evt);
            }
        });
        memberSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                memberSearchKeyReleased(evt);
            }
        });

        NeuesMitgliedButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        NeuesMitgliedButton.setText("Neues Mitglied anlegen");
        NeuesMitgliedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NeuesMitgliedButtonActionPerformed(evt);
            }
        });

        AenderungenSpeichernButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        AenderungenSpeichernButton.setText("Mitglied bearbeiten/ löschen");
        AenderungenSpeichernButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AenderungenSpeichernButtonMouseClicked(evt);
            }
        });

        tableMitglied.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vorname", "Nachname", "Land", "Stadt", "E-Mail", "Geburtstag"
            }
        ));
        jScrollPane1.setViewportView(tableMitglied);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(NeuesMitgliedButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AenderungenSpeichernButton))
                    .addComponent(memberSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(memberSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NeuesMitgliedButton)
                    .addComponent(AenderungenSpeichernButton))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void memberSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_memberSearchActionPerformed

    private void NeuesMitgliedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NeuesMitgliedButtonActionPerformed
        // TODO add your handling code here:
        MitgliedFrame mf = new MitgliedFrame(this);
        mf.setVisible(true);
    }//GEN-LAST:event_NeuesMitgliedButtonActionPerformed

    private void AenderungenSpeichernButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AenderungenSpeichernButtonMouseClicked
        // TODO add your handling code here:
        int[] selectedRows = tableMitglied.getSelectedRows();

        if (tableMitglied.getRowCount() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Keine Mitglieder vorhanden");
        } else {
            if (selectedRows.length == 0) {
                JOptionPane.showMessageDialog(rootPane, "Mitglied Auswählen");
            } else {
                try {
                    System.out.println("CLICKED");
                    MitgliedFrame mf = new MitgliedFrame(this, members.get(tableMitglied.convertRowIndexToModel(lastSelectedRow)));
                    mf.setVisible(true);
                } catch (RemoteException ex) {
                    Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_AenderungenSpeichernButtonMouseClicked

    private void memberSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memberSearchKeyReleased
        // TODO add your handling code here:
        String text = memberSearch.getText();
        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }//GEN-LAST:event_memberSearchKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MitgliedverwaltungFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AenderungenSpeichernButton;
    private javax.swing.JButton NeuesMitgliedButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField memberSearch;
    private javax.swing.JTable tableMitglied;
    // End of variables declaration//GEN-END:variables
    private TableRowSorter<TableModel> sorter;

    private void showFrame() {
        WelcomeFrame fr = new WelcomeFrame();
        this.dispose();
        this.setVisible(false);
        fr.setVisible(true);
    }

    private void setRowSorter() {
        TableModel model = tableMitglied.getModel();
        sorter = new TableRowSorter<TableModel>(model);
        tableMitglied.setRowSorter(sorter);
    }

    private void fillTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) tableMitglied.getModel();

            resetAllRows(model);
            model.setRowCount(0);
            int i = 0;
            IClubMemberDTOControllerFactory cmc = GUIController.getClubMemberController();
            for (ClubMemberDTO member : cmc.getAllClubMembers()) {
                members.put(i++, member);
                model.addRow(new Object[]{member.getFirstname(), member.getLastname(), member.getCountry(), member.getCity(), member.getMail(), member.getBirthday().toString()});
            }
        } catch (RemoteException ex) {
            Logger.getLogger(MitgliedverwaltungFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void resetAllRows(DefaultTableModel model) {
        for (int i = 0; i < model.getRowCount(); i++) {
            model.removeRow(i);
        }
    }

    public void updateTable() {
        fillTable();
    }
}
