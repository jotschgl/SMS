/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CommunicationInterfaces.ClubMemberDTO;
import CommunicationInterfaces.FunctionRoleDTO;
import CommunicationInterfaces.IClubMemberDTOControllerFactory;
import CommunicationInterfaces.IRoleDTOControllerFactory;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andreas
 */
public class MitgliedRolleZuteilenFrame extends javax.swing.JFrame {

    /**
     * Creates new form MitgliedRolleZuteilenFrame
     */
    private HashMap<Integer, ClubMemberDTO> _members = new HashMap<Integer, ClubMemberDTO>();
    private HashMap<Integer, FunctionRoleDTO> _roles = new HashMap<Integer, FunctionRoleDTO>();
    private int lastSelectedRow;
    private IClubMemberDTOControllerFactory memberController;
    private Collection<FunctionRoleDTO> allRoles;

    public MitgliedRolleZuteilenFrame() throws RemoteException {
        initComponents();
        allRoles = GUIController.getRoleControllerFactory().getAllRoles();
        setLocationRelativeTo(null);
        filltable();
        ListSelectionModel cellSelectionmodel = tableMitglied.getSelectionModel();
        cellSelectionmodel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tableMitglied.setRowSelectionAllowed(true);

        cellSelectionmodel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                lastSelectedRow = tableMitglied.getSelectedRow();
                if (lastSelectedRow >= 0) {

                    ClubMemberDTO member = _members.get((tableMitglied.convertRowIndexToModel(lastSelectedRow)));
                    System.out.println(member.getFirstname() + " valuechange " + lastSelectedRow);
                    tableRolle.setModel(new RoleTableModel(member.getAllFunctionRolesOfClubMember()));
                    RoleTableModel alleRollen = new RoleTableModel();
                    for (FunctionRoleDTO role : allRoles) {
                        if (!member.getAllFunctionRolesOfClubMember().contains(role)) {
                            alleRollen.addRole(role);
                        }
                    }
                    tableAlleRollen.setModel(alleRollen);
                    // ((RoleTableModel) tableAlleRollen.getModel()).fireTableDataChanged();
                    // ((RoleTableModel) tableRolle.getModel()).fireTableDataChanged();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMitglied = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableAlleRollen = new javax.swing.JTable();
        btnSpeichern = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableRolle = new javax.swing.JTable();
        buttonEnfternen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Support My Sports - Mitglied Rolle geben");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Mitglieder Rolle hinzufügen");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Mitlgied");

        tableMitglied.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableMitglied.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vorname", "Nachname", "Email"
            }
        ));
        jScrollPane1.setViewportView(tableMitglied);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("vergebene Rollen");

        tableAlleRollen.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableAlleRollen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rolle"
            }
        ));
        jScrollPane2.setViewportView(tableAlleRollen);

        btnSpeichern.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnSpeichern.setText("Rollen hinzufügen");
        btnSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSpeichernActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("nicht vergebene Rollen");

        tableRolle.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableRolle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rolle"
            }
        ));
        jScrollPane3.setViewportView(tableRolle);

        buttonEnfternen.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        buttonEnfternen.setText("Rollen entfernen");
        buttonEnfternen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnfternenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(buttonEnfternen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSpeichern, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpeichern)
                    .addComponent(buttonEnfternen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSpeichernActionPerformed
        // TODO add your handling code here:
        tableMitglied.setEnabled(false);
        try {
            if (tableMitglied.getSelectedRow() != -1) {
                int[] rollen = tableAlleRollen.getSelectedRows();

                ClubMemberDTO member = _members.get(tableMitglied.convertRowIndexToModel(lastSelectedRow));
                System.out.println(member.getFirstname() + " ");
                moveUp(member, rollen);
                memberController.createOrUpdateClubMember(member);
            }



        } catch (RemoteException ex) {
            Logger.getLogger(MitgliedRolleZuteilenFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableMitglied.setEnabled(true);

    }//GEN-LAST:event_btnSpeichernActionPerformed

    private void buttonEnfternenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnfternenActionPerformed
        // TODO add your handling code here:
        tableMitglied.setEnabled(false);
        try {
            if (tableMitglied.getSelectedRow() != -1) {
                int[] rollen = tableRolle.getSelectedRows();

                ClubMemberDTO member = _members.get(tableMitglied.convertRowIndexToModel(lastSelectedRow));

                moveDown(member, rollen);

                memberController.createOrUpdateClubMember(member);
            }


        } catch (RemoteException ex) {
            Logger.getLogger(MitgliedRolleZuteilenFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        tableMitglied.setEnabled(true);


    }//GEN-LAST:event_buttonEnfternenActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSpeichern;
    private javax.swing.JButton buttonEnfternen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableAlleRollen;
    private javax.swing.JTable tableMitglied;
    private javax.swing.JTable tableRolle;
    // End of variables declaration//GEN-END:variables

    private void filltable() throws RemoteException {
        memberController = GUIController.getClubMemberController();
        DefaultTableModel mitgliedModel = (DefaultTableModel) tableMitglied.getModel();
        int i = 0;
        mitgliedModel.setRowCount(0);
        for (ClubMemberDTO m : memberController.getAllClubMembers()) {
            mitgliedModel.addRow(new Object[]{m.getFirstname(), m.getLastname(), m.getMail()});
            _members.put(i++, m);
        }
    }

    private void moveUp(ClubMemberDTO member, int[] rollen) {
        RoleTableModel modelTop = (RoleTableModel) tableRolle.getModel();
        RoleTableModel modelDown = (RoleTableModel) tableAlleRollen.getModel();
        LinkedList<FunctionRoleDTO> changes = new LinkedList<FunctionRoleDTO>();
        for (int i : rollen) {
            changes.add(modelDown.getRole(tableAlleRollen.convertRowIndexToModel(i)));
        }
        for (FunctionRoleDTO role : changes) {
            modelDown.removeRole(role);
            modelTop.addRole(role);
            member.addFunctionRole(role);
        }
        modelDown.fireTableDataChanged();
        modelTop.fireTableDataChanged();
    }

    private void moveDown(ClubMemberDTO member, int[] rollen) {
        RoleTableModel modelTop = (RoleTableModel) tableRolle.getModel();
        RoleTableModel modelDown = (RoleTableModel) tableAlleRollen.getModel();
        LinkedList<FunctionRoleDTO> changes = new LinkedList<FunctionRoleDTO>();
        for (int i : rollen) {
            changes.add(modelTop.getRole(tableAlleRollen.convertRowIndexToModel(i)));
        }
        for (FunctionRoleDTO role : changes) {
            modelTop.removeRole(role);
            modelDown.addRole(role);
            member.removeFunktionRole(role);
        }
        modelDown.fireTableDataChanged();
        modelTop.fireTableDataChanged();
    }

    private class RoleTableModel extends AbstractTableModel {

        public RoleTableModel() {
            roles = new LinkedList<FunctionRoleDTO>();
        }

        public RoleTableModel(Collection<FunctionRoleDTO> roles) {
            this.roles = roles;
        }
        private Collection<FunctionRoleDTO> roles;

        @Override
        public int getRowCount() {
            return roles.size();
        }

        @Override
        public int getColumnCount() {
            return 1;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return roles.toArray(new FunctionRoleDTO[0])[rowIndex].getName();
        }

        public void addRole(FunctionRoleDTO role) {
            roles.add(role);
        }

        public FunctionRoleDTO removeRole(int i) {
            FunctionRoleDTO role = roles.toArray(new FunctionRoleDTO[0])[i];
            roles.remove(role);
            return role;
        }

        private FunctionRoleDTO getRole(int i) {
            return roles.toArray(new FunctionRoleDTO[0])[i];
        }

        private void removeRole(FunctionRoleDTO role) {
            roles.remove(role);
        }
    }
}
