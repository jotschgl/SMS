/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CommunicationInterfaces.CompetitionDTO;
import CommunicationInterfaces.CompetitionTeamDTO;
import CommunicationInterfaces.TeamDTO;
import java.rmi.RemoteException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Johannes
 */
public class AddTeamToCompetitionFrame extends javax.swing.JFrame {

    /**
     * Creates new form AddTeamToCompetitionFrame
     */
    private WettkampfBearbeitung preFrame;
    private CompetitionDTO competition;
    private HashMap<Integer, TeamDTO> _teammap = new HashMap<Integer, TeamDTO>();

    public AddTeamToCompetitionFrame(CompetitionDTO curCompetition, WettkampfBearbeitung prevFrame) {
        try {
            this.preFrame = prevFrame;
            this.competition = curCompetition;
            initComponents();
            fillTable();
        } catch (RemoteException ex) {
            Logger.getLogger(AddTeamToCompetitionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableTeams = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mannschaft auswählen");
        setResizable(false);

        buttonAdd.setText("Hinzufügen");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        tableTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nr", "Name", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableTeams);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonAdd)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(buttonAdd)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        try {
            int[] rows = tableTeams.getSelectedRows();
            //Collection<CompetitionTeamDTO> comteams = new LinkedList<CompetitionTeamDTO>();
            for (int i : rows) {
                TeamDTO team = _teammap.get(tableTeams.convertRowIndexToModel(i));

                CompetitionTeamDTO ct = new CompetitionTeamDTO(team, competition);
                competition.addTeamToCompetition(ct);

            }
            GUIController.getCompetitionController().updateCompetition(competition);
            //  preFrame.fillTableCompTeams();
        } catch (RemoteException ex) {
            Logger.getLogger(AddTeamToCompetitionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buttonAddActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableTeams;
    // End of variables declaration//GEN-END:variables

    private void fillTable() throws RemoteException {
        Collection<TeamDTO> teams = GUIController.getCompetitionController().getAllTeamsOfSport(competition.getSport().getId());
        Collection<CompetitionTeamDTO> comteams = competition.getAllTeamsOfCompetition();
        DefaultTableModel model = (DefaultTableModel) tableTeams.getModel();
        model.setRowCount(0);
        int i = 0;
        for (TeamDTO team : teams) {
            boolean add = true;
            for (CompetitionTeamDTO comteam : comteams) {
                if (comteam.getTeam().getId() == team.getId()) {
                    add = false;
                    break;
                }
            }
            if (add) {
                _teammap.put(++i, team);
                model.addRow(new Object[]{i, team.getTeamName()});
            }
        }

    }
}
